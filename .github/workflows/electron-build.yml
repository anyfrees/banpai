name: Build banpai App

on:
  push:
    tags: # 仅当推送新的标签时触发 (例如 v1.0.0, v1.0.1)
      - 'v*' # 匹配所有以 'v' 开头的标签
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    name: Build for ${{ matrix.os }} on Node ${{ matrix.node_version }}
    runs-on: ${{ matrix.os }} # 在不同的操作系统上运行构建任务

    strategy:
      matrix: # 定义构建矩阵
        os: [macos-latest, ubuntu-latest, windows-latest]
        node_version: ['18.x'] # 您可以指定多个Node.js版本，如果需要的话

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'npm'

      - name: Install dependencies (npm)
        run: npm ci

      - name: Install app dependencies for electron-builder
        run: npm run postinstall # 运行 package.json 中的 postinstall 脚本

      # macOS 构建特定步骤 (如果需要代码签名和公证)
      # - name: Import Code-Signing Certificates (macOS)
      #   if: matrix.os == 'macos-latest' && secrets.MAC_CERTS_P12_BASE64 != '' && secrets.MAC_CERTS_PASSWORD != ''
      #   uses: apple-actions/import-codesign-certs@v2
      #   with:
      #     p12-file-base64: ${{ secrets.MAC_CERTS_P12_BASE64 }}
      #     p12-password: ${{ secrets.MAC_CERTS_PASSWORD }}

      - name: Build/release Electron app
        shell: bash # 确保在 macOS 和 Linux 上使用 bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            npm run dist:mac
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            npm run dist:win
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            npm run dist:linux
          else
            npm run dist # 作为备用，或者可以报错
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # --- macOS Codesigning and Notarization ---
          # CSC_LINK: ${{ secrets.MAC_CERTS_P12_BASE64 }} # Base64 encoded .p12 file
          # CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }} # App-specific password
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # --- Windows Codesigning ---
          # WIN_CSC_LINK: ${{ secrets.WIN_PFX_FILE_BASE64 }} # Base64 encoded .pfx file
          # WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_PFX_PASSWORD }}

      - name: Upload Artifacts
        if: success() # 仅在构建成功时上传
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build-${{ github.ref_name }}
          path: dist_electron/ # 与 package.json 中的 directories.output 一致
          # retention-days: 7
